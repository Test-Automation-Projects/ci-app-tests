name: Teamcity setup
description: Setup Teamcity server and agent

runs:
  using: composite
  steps:
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'

    # By default, the `ifconfig` command is not available on Ubuntu
    - name: Install ifconfig
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y net-tools

    - name: Set up host environment variable
      shell: bash
      # Command to determine the IP address for access from another container, recommended in Selenoid UI documentation: https://aerokube.com/selenoid-ui/latest/
      run: |
        echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

    # Store variables both as environment variables ($GITHUB_ENV) for this YAML file and in config.properties for use in tests
    - name: Set up host config property
      shell: bash
      run: sed -i "s/^host=.*/host=$HOST:8111/" src/main/resources/config.properties

    - name: Pull Selenoid browsers
      shell: bash
      # Parse browsers.json and extract all browsers
      run: |
        for browser in $(awk -F'"' '/"image": "/{print $4}' "config/browsers.json"); do
          docker pull $browser
        done

    - name: Run Selenoid
      shell: bash
      # The `-d` flag runs the container in the background (e.g., for containers like servers that remain running indefinitely)
      # Without this flag, the step would block the pipeline
      run: |
        docker run -d --name selenoid \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $(pwd)/config/:/etc/selenoid/:ro \
        -p 4444:4444 \
        aerokube/selenoid:latest-release

    # This step is not meaningful in GitHub Actions since thereâ€™s no access to Selenoid UI.
    # However, it is useful for local execution via `act` for debugging purposes
    - name: Run Selenoid UI
      shell: bash
      run: |
        docker run -d --name selenoid-ui \
        -p 8080:8080 \
        aerokube/selenoid-ui:latest-release \
        --selenoid-uri http://$HOST:4444

    - name: Run TeamCity server
      shell: bash
      # The `-u 0` flag runs the container as root to allow writing to the directories specified in the volume.
      # Ideally, directories should be owned by the container user (`chown -R 1000:1000`), but this adds complexity
      # and is not prioritized in the context of this task.
      # Specify exact versions for the server and agent to avoid potential issues with locators changing in new versions.
      run: |
        docker run -u 0 -d --name teamcity-server \
        -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
        -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs \
        -p 8111:8111 \
        jetbrains/teamcity-server:2023.11.1

    - name: Set up TeamCity server
      shell: bash
      # Server setup on the first run (accepting license, selecting database, etc.) implemented as a test
      # Also updates all dependency versions to the latest
      run: ./mvnw clean versions:update-properties test -Dtest=SetupServerTest#setupTeamCityServerTest

    - name: Set up superUserToken environment variable
      shell: bash
      # Extract the token from the container logs, taking the sixth word from the latest relevant log entry
      run: echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV

    - name: Set up superUserToken config property
      shell: bash
      run: sed -i "s/^superUserToken=.*/superUserToken=$SUPER_USER_TOKEN/" src/main/resources/config.properties

    - name: Run TeamCity agent
      shell: bash
      run: |
        docker run -e SERVER_URL=http://$HOST:8111 -u 0 -d --name teamcity-agent \
        -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
        jetbrains/teamcity-agent:2023.11.1

    - name: Set up TeamCity agent
      shell: bash
      # Agent authorization on the first run, implemented as a test
      # `clean` is not used here to ensure setup tests are included in the final report
      run: ./mvnw test -Dtest=SetupAgentTest#setupTeamCityAgentTest
